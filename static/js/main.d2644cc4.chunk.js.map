{"version":3,"sources":["screens/Home.js","screens/About.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["customStyles","content","top","left","right","bottom","marginRight","transform","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","gifyClicked","event","_this$state","state","clicked","results","score","includes","target","id","setState","shuffle","showModal","won","newClicked","splice","push","newResults","renderImages","_this$state2","map","result","react_default","a","createElement","Fragment","lib_default","isOpen","style","contentLabel","ariaHideApp","key","ref","subtitle","Button","onClick","handleCloseModal","Col","xs","sm","md","Card","tag","width","cursor","Img","variant","src","url","array","temporaryValue","randomIndex","newArray","slice","currentIndex","length","Math","floor","random","handleOpenModal","search","getGifs","_this2","axios","get","then","response","pics","temp","data","i","picObj","images","original","_this$state3","Container","Row","Component","About","Nav","react_router_dom","to","App","components_Nav","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2644cc4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Card, Button, Col, Container, Row } from 'react-bootstrap';\nimport Modal from 'react-modal';\n\n\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)'\n    }\n};\n\n\nclass Home extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            search: '',\n            score: 0,\n            results: [],\n            clicked: [],\n            showModal: false,\n        }\n    }\n\n    componentDidMount() {\n        this.getGifs();\n    }\n\n\n    getGifs() {\n        axios.get('https://api.giphy.com/v1/gifs/search?q=disney+mulan+mushu+cartoon&api_key=BkaUZZWcFij6J7AoQj3WtPb1R2p9O6V9')\n            .then((response) => {\n\n                let pics = [];\n                let temp = response.data.data;\n\n                for (var i = 0; i < 12; i++) {\n                    let picObj = {};\n                    picObj.url = temp[i].images.original.url;\n                    picObj.id = temp[i].id;\n                    picObj.clicked = false;\n                    pics.push(picObj);\n                }\n\n                this.setState({\n                    results: pics,\n                })\n            })\n    }\n\n    gifyClicked = event => {\n        \n        const { clicked, results, score } = this.state;\n\n        if (clicked.includes(event.target.id) && score < 12) {\n            //window.alert(\"Pic has been clicked before... Game resetting\", 'error');\n\n            this.setState({\n                results: this.shuffle(results),\n                score: 0,\n                clicked: [],\n                showModal: true,\n                won: false,\n            })\n        } else if( score === 11 ) {\n            this.setState({\n                score: 0,\n                clicked: [],\n                showModal: true,\n                won: true,\n            })\n        } else {\n\n            let newClicked = clicked.splice(0);\n            newClicked.push(event.target.id);\n\n            let newResults = this.shuffle(results);\n\n            this.setState({\n                results: newResults,\n                score: score + 1,\n                clicked: newClicked,\n                won: false,\n            })\n        }\n\n    }\n\n    renderImages = () => {\n\n        const { results, showModal, won } = this.state;\n\n        return (results.map((result) => {\n            //console.log(result.id)\n            return (\n                <>\n                    <Modal\n                        isOpen={showModal}\n                        // onAfterOpen={this.afterOpenModal}\n                        // onRequestClose={this.handleCloseModal}\n                        style={customStyles}\n                        contentLabel=\"Game Announcement Modal\"\n                        ariaHideApp={false}\n                        key=\"Modal\"\n                    >\n\n                        <h2 ref={subtitle => this.subtitle = subtitle}>Game Announcement:</h2>\n                        <Button onClick={this.handleCloseModal}>close</Button>\n                        <div>{(won) ? \"You Won!\" : \"You clicked a gif twice... Game resetting\"}</div>\n                    </Modal>\n                    <Col id={\"column-\" + result.id} key={\"column-\" + result.id} xs={12} sm={6} md={4}>\n                        <Card tag=\"a\" onClick={this.gifyClicked} id={\"card\" + result.id} key={\"card\" + result.id} clicked=\"false\" style={{ width: '18rem', cursor: \"pointer\" }}>\n                            <Card.Img key={result.id} id={result.id} variant=\"top\" src={result.url} />\n                        </Card>\n                    </Col>\n                </>\n            )\n        }))\n    }\n\n    shuffle = (array) => {\n\n        let newArray = array.slice(0);\n\n        var currentIndex = newArray.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = newArray[currentIndex];\n            newArray[currentIndex] = newArray[randomIndex];\n            newArray[randomIndex] = temporaryValue;\n        }\n\n        return newArray;\n    }\n\n    handleOpenModal = () => {\n        this.setState({ showModal: true });\n    }\n\n    handleCloseModal = () => {\n        this.setState({ showModal: false });\n    }\n\n\n    render() {\n\n        const { results, score } = this.state;\n\n        if (results != null && results.length > 0) {\n\n            return (\n                <>\n                    <h1>Score: {score}</h1>\n                    <Container>\n                        <Row>\n                            {this.renderImages()}\n                        </Row>\n                    </Container>\n                </>\n            )\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Container, Row } from 'react-bootstrap';\n\nclass About extends Component {\n\n    render() {\n        return(\n            <Container>\n                <Row>\n                    <h1> About the game </h1>\n                    <p> Click the pics only once</p>\n                    <p> You win if you click all gifs</p>\n                    <p> Game resets if you click a gif twice</p>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Nav extends Component {\n    render() {\n        return (\n            <>\n                <Link to='/dont-click-me-twice-react'>Game</Link>\n                <br />\n                <Link to='/dont-click-me-twice-react/About'>Instructions</Link>\n            </>\n        )\n    }\n}\n\nexport default Nav;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Home from './screens/Home';\nimport About from './screens/About';\nimport Nav from './components/Nav';\n\nfunction App() {\n  return (\n    <Router>\n      <>\n        <Nav key=\"3\" />\n        <Route key=\"0\" exact path='/' component={Home} />\n        <Route key=\"1\" exact path='/dont-click-me-twice-react' component={Home} />\n        <Route key=\"2\" exact path='/dont-click-me-twice-react/About' component={About} />\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}