{"version":3,"sources":["screens/Home.js","screens/About.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","gifyClicked","event","console","log","target","results","state","newPics","shuffle","setState","search","getGifs","_this2","axios","get","then","response","pics","temp","data","i","picObj","url","images","original","id","clicked","push","_this3","map","result","react_default","a","createElement","Col","xs","sm","md","Card","tag","onClick","key","style","width","cursor","Img","variant","src","array","temporaryValue","randomIndex","newArray","slice","currentIndex","length","Math","floor","random","Container","Row","renderImages","Component","About","Nav","Fragment","react_router_dom","to","App","components_Nav","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cad96e44.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Card, Button, Col, Container, Row } from 'react-bootstrap';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            search: '',\n            results: [],\n        }\n    }\n\n    componentDidMount() {\n        this.getGifs();\n    }\n\n\n    getGifs() {\n        axios.get('https://api.giphy.com/v1/gifs/trending?api_key=BkaUZZWcFij6J7AoQj3WtPb1R2p9O6V9')\n            .then((response) => {\n\n                let pics = [];\n                let temp = response.data.data;\n\n                for (var i = 0; i < 12; i++) {\n                    let picObj = {};\n                    picObj.url = temp[i].images.original.url;\n                    picObj.id = temp[i].id;\n                    picObj.clicked = false;\n                    pics.push(picObj);\n                }\n\n                this.setState({\n                    results: pics,\n                })\n                console.log(this.state.results);\n            })\n    }\n\n    gifyClicked = event => {\n        console.log(\"Clicked image\");\n        console.log(event.target);\n\n        const { results } = this.state;\n\n        let newPics = this.shuffle(results);\n\n        this.setState({\n            results: newPics,\n        })\n\n    }\n\n    renderImages() {\n\n        const { results } = this.state;\n\n        return (results.map((result) => {\n            //console.log(result.id)\n            return (\n                <Col xs={12} sm={6} md={4}>\n                    <Card tag=\"a\" onClick={this.gifyClicked} id={result.id} key={result.id} clicked=\"false\" style={{ width: '18rem', cursor: \"pointer\" }}>\n                        <Card.Img key={result.id} id={result.id} variant=\"top\" src={result.url} />\n                    </Card>\n                </Col>\n            )\n        }))\n    }\n\n    shuffle(array) {\n\n        let newArray = array.slice(0);\n\n        var currentIndex = newArray.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = newArray[currentIndex];\n            newArray[currentIndex] = newArray[randomIndex];\n            newArray[randomIndex] = temporaryValue;\n        }\n\n        return newArray;\n    }\n\n\n\n\n    render() {\n\n        //const { results } = this.state;\n\n        if (this.state && this.state.results != null && this.state.results.length > 0) {\n\n            return (\n                <Container>\n                    <Row>\n                        {this.renderImages()}\n                    </Row>\n                </Container>\n            )\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Card, Button, Col, Container, Row } from 'react-bootstrap';\n\nclass About extends Component {\n\n    render() {\n        return(\n            <Container>\n                <Row>\n                    <h1> About Us </h1>\n                    <p> typing for the sake of typing</p>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Nav extends Component {\n    render() {\n        return (\n            <>\n                <Link to='/dont-click-me-twice-react'>Home</Link>\n                <br />\n                <Link to='/dont-click-me-twice-react/About'>About</Link>\n            </>\n        )\n    }\n}\n\nexport default Nav;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Home from './screens/Home';\nimport About from './screens/About';\nimport Nav from './components/Nav';\n\nfunction App() {\n  return (\n    <Router>\n      <>\n        <Nav />\n        <Route exact path='/dont-click-me-twice-react' component={Home} />\n        <Route exact path='/dont-click-me-twice-react/About' component={About} />\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}